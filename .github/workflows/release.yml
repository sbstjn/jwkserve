name: Release & Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: |
            x86_64-unknown-linux-gnu

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            src/target/
          key: cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Test
        run: cargo test --manifest-path ./src/Cargo.toml

  crates-jwkserve:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            src/target/
          key: cargo-publish-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Cargo Set-Version
        run: cargo install cargo-set-version || true

      - name: Set Version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          cargo set-version $VERSION --manifest-path ./src/Cargo.toml
          
      - name: Publish jwkserve library
        run: |
          cd src/jwkserve
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  crates-jwkserve-cli:
    runs-on: ubuntu-latest
    needs: [crates-jwkserve]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            src/target/
          key: cargo-publish-cli-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Cargo Set-Version
        run: cargo install cargo-set-version || true

      - name: Set Version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          cargo set-version $VERSION --manifest-path ./src/Cargo.toml
          
      - name: Publish jwkserve-cli
        run: |
          cd src/jwkserve-cli
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-arm:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: |
            aarch64-unknown-linux-gnu

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            src/target/
          key: cargo-build-arm-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild
        run: cargo install cargo-zigbuild

      - name: Install Cargo Set-Version
        run: cargo install cargo-set-version || true

      - name: Set Version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          cargo set-version $VERSION --manifest-path ./src/Cargo.toml

      - name: Build ARM
        run: cargo zigbuild --release -p jwkserve-cli --manifest-path ./src/Cargo.toml --target aarch64-unknown-linux-gnu

      - name: Upload ARM artifact
        uses: actions/upload-artifact@v4
        with:
          name: jwkserve-cli-arm
          path: src/target/aarch64-unknown-linux-gnu/release/jwkserve

  build-x86:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: |
            x86_64-unknown-linux-gnu

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            src/target/
          key: cargo-build-x86-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild
        run: cargo install cargo-zigbuild

      - name: Install Cargo Set-Version
        run: cargo install cargo-set-version || true

      - name: Set Version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          cargo set-version $VERSION --manifest-path ./src/Cargo.toml

      - name: Build X86
        run: cargo zigbuild --release -p jwkserve-cli --manifest-path ./src/Cargo.toml --target x86_64-unknown-linux-gnu

      - name: Upload X86 artifact
        uses: actions/upload-artifact@v4
        with:
          name: jwkserve-cli-x86
          path: src/target/x86_64-unknown-linux-gnu/release/jwkserve

  docker:
    needs: [build-arm, build-x86, test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download ARM artifact
        uses: actions/download-artifact@v4
        with: 
          name: jwkserve-cli-arm
          path: ./src/target/aarch64-unknown-linux-gnu/release/

      - name: Download X86 artifact
        uses: actions/download-artifact@v4
        with:
          name: jwkserve-cli-x86
          path: ./src/target/x86_64-unknown-linux-gnu/release/

      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create build context
        run: |
          mkdir -p build-context/src
          cp -r src/target build-context/src
          cp Dockerfile build-context/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-context
          path: build-context

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: build-context
          platforms: linux/amd64,linux/arm64
          push: true
          tags: sbstjn/jwkserve:${{ github.ref_name }},sbstjn/jwkserve:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
